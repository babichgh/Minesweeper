<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∞–ø—ë—Ä - –ò–≥—Ä–∞</title>
    <style>
        * {
            box-sizing: border-box;
            user-select: none;
            -webkit-tap-highlight-color: transparent;
        }
        body {
            font-family: 'Arial', sans-serif;
            text-align: center;
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            margin: 0;
            padding: 20px;
            color: white;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            transition: background 0.5s ease;
            overflow: hidden;
        }
        #game-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 100%;
            max-height: 90vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        h1 {
            margin-top: 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            font-size: 2.5em;
        }
        #stats {
            display: flex;
            justify-content: space-around;
            margin-bottom: 15px;
            font-size: 1.2em;
            font-weight: bold;
            background: rgba(0, 0, 0, 0.2);
            padding: 10px;
            border-radius: 10px;
            flex-wrap: wrap;
        }
        .stat-item {
            margin: 5px 10px;
            display: flex;
            align-items: center;
        }
        .time-warning {
            color: #ff6b6b;
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        #board-scroll-container {
            width: 100%;
            overflow: auto;
            margin: 0 auto;
            max-height: 50vh;
            border-radius: 8px;
            border: 3px solid #34495e;
            background-color: #2c3e50;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
            -webkit-overflow-scrolling: touch;
            position: relative;
        }
        #board-container {
            padding: 8px;
            display: inline-block;
            margin: 0 auto;
        }
        #board {
            display: grid;
            gap: 3px;
            margin: 0 auto;
            width: fit-content;
            touch-action: manipulation;
        }
        .cell {
            width: 40px;
            height: 40px;
            min-width: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 18px;
            background: linear-gradient(145deg, #bdc3c7, #ecf0f1);
            border: 2px outset #95a5a6;
            cursor: pointer;
            transition: all 0.1s ease;
            border-radius: 4px;
            box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
            touch-action: manipulation;
        }
        .cell:active, .cell.touched {
            transform: scale(0.95);
            box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);
        }
        .cell.revealed {
            border: 1px solid #7f8c8d;
            background: linear-gradient(145deg, #dfe6e9, #b2bec3);
            box-shadow: inset 1px 1px 3px rgba(0, 0, 0, 0.1);
            transform: scale(1);
        }
        .cell.flagged::after {
            content: 'üö©';
            font-size: 20px;
        }
        .cell.mine::after {
            content: 'üí£';
            font-size: 20px;
        }
        .cell.mine.exploded {
            background: #ff4444;
            box-shadow: 0 0 10px #ff4444;
        }
        .cell.hint {
            background: #ffeb3b;
            box-shadow: 0 0 15px #ffc107;
            animation: pulse 1s infinite;
            z-index: 10;
        }
        @keyframes pulse {
            0% { transform: scale(1); box-shadow: 0 0 10px #ffc107; }
            50% { transform: scale(1.1); box-shadow: 0 0 20px #ffc107; }
            100% { transform: scale(1); box-shadow: 0 0 10px #ffc107; }
        }
        /* –¶–≤–µ—Ç–∞ –¥–ª—è —Ü–∏—Ñ—Ä */
        .num-1 { color: #2980b9; }
        .num-2 { color: #27ae60; }
        .num-3 { color: #e74c3c; }
        .num-4 { color: #8e44ad; }
        .num-5 { color: #d35400; }
        .num-6 { color: #16a085; }
        .num-7 { color: #2c3e50; }
        .num-8 { color: #7f8c8d; }
        #message {
            font-size: 1.5em;
            font-weight: bold;
            margin: 15px 0;
            min-height: 2em;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
            transition: all 0.3s ease;
        }
        #controls {
            margin-top: 15px;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
        }
        button {
            padding: 12px 24px;
            font-size: 1em;
            font-family: 'Arial', sans-serif;
            font-weight: bold;
            background: linear-gradient(to bottom, #4CAF50, #388E3C);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: all 0.2s ease;
            min-width: 140px;
        }
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
        }
        button:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        button#hint-btn {
            background: linear-gradient(to bottom, #FF9800, #F57C00);
        }
        button#hint-btn:disabled {
            background: #7f8c8d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        button#shop-btn {
            background: linear-gradient(to bottom, #9b59b6, #8e44ad);
        }
        button#daily-btn {
            background: linear-gradient(to bottom, #e67e22, #d35400);
        }
        button#daily-btn:disabled {
            background: #7f8c8d;
            cursor: not-allowed;
        }
        button#settings-btn {
            background: linear-gradient(to bottom, #607D8B, #455A64);
        }
        button#mode-toggle {
            background: linear-gradient(to bottom, #2196F3, #0D47A1);
            display: none;
        }
        select {
            padding: 12px;
            border-radius: 8px;
            border: none;
            background: white;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            font-family: 'Arial', sans-serif;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            min-width: 200px;
            transition: all 0.2s ease;
        }
        select:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transform: translateY(-1px);
        }
        #game-mode {
            padding: 12px;
            border-radius: 8px;
            border: none;
            background: white;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            font-family: 'Arial', sans-serif;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            min-width: 180px;
            transition: all 0.2s ease;
        }
        #game-mode:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transform: translateY(-1px);
        }
        #custom-settings {
            display: none;
            background: rgba(0, 0, 0, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin-top: 10px;
            animation: fadeIn 0.3s ease;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        #custom-settings div {
            margin: 8px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
        }
        #custom-settings label {
            margin-right: 10px;
            font-weight: bold;
            min-width: 100px;
            text-align: right;
        }
        input[type="number"] {
            width: 80px;
            padding: 10px;
            border-radius: 5px;
            border: none;
            margin: 0 5px;
            font-family: 'Arial', sans-serif;
            font-size: 1em;
            text-align: center;
        }
        .hint-counter {
            display: inline-block;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            width: 25px;
            height: 25px;
            line-height: 25px;
            margin-left: 5px;
        }
        .coin {
            display: inline-block;
            background: linear-gradient(145deg, #ffd700, #daa520);
            color: #8b7500;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            line-height: 25px;
            margin-left: 5px;
            font-weight: bold;
            text-shadow: 0 0 1px white;
            box-shadow: 0 0 3px rgba(255, 215, 0, 0.5);
        }
        #global-stats {
            display: flex;
            justify-content: space-around;
            margin: 15px 0;
            font-size: 1em;
            background: rgba(0, 0, 0, 0.2);
            padding: 12px;
            border-radius: 10px;
            flex-wrap: wrap;
        }
        #fps-counter {
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.5);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
        }
        #how-to-play {
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.2);
            padding: 15px;
            border-radius: 10px;
            text-align: left;
            max-width: 600px;
            animation: fadeIn 0.3s ease;
        }
        #how-to-play h3 {
            margin-top: 0;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            user-select: none;
            margin-bottom: 0;
        }
        #how-to-play-content {
            display: none;
            animation: fadeIn 0.3s ease;
        }
        #how-to-play-content ul {
            padding-left: 20px;
            margin-bottom: 0;
        }
        .win-rate-positive {
            color: #4CAF50;
            font-weight: bold;
        }
        .win-rate-negative {
            color: #F44336;
            font-weight: bold;
        }
        #shop {
            display: none;
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            animation: fadeIn 0.3s ease;
        }
        #shop h3 {
            margin-top: 0;
            color: #ffd700;
        }
        .shop-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        }
        #themes {
            display: none;
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            animation: fadeIn 0.3s ease;
        }
        #themes h3 {
            margin-top: 0;
            color: #9b59b6;
        }
        .theme-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .theme-item:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        .theme-item.active {
            background: rgba(255, 255, 255, 0.3);
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.2);
        }
        .theme-preview {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 10px;
            display: inline-block;
        }
        #daily-reward {
            display: none;
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            animation: fadeIn 0.3s ease;
        }
        #daily-reward h3 {
            margin-top: 0;
            color: #e67e22;
        }
        .reward-text {
            font-size: 1.2em;
            margin: 10px 0;
            animation: fadeIn 0.3s ease;
        }
        .timer-text {
            font-size: 0.9em;
            color: #bdc3c7;
            margin-top: 5px;
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–∫–æ—Ä–¥–æ–≤ */
        #records {
            display: none;
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            animation: fadeIn 0.3s ease;
        }
        #records h3 {
            margin-top: 0;
            color: #4CAF50;
        }
        .record-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 8px 0;
            padding: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 6px;
        }
        .record-difficulty {
            font-weight: bold;
            min-width: 100px;
            text-align: left;
        }
        .record-time {
            font-family: monospace;
        }
        /* –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–ª–µ—Ç–æ–∫ */
        @keyframes revealCell {
            0% { transform: scale(0.8); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }
        .cell-reveal {
            animation: revealCell 0.2s ease;
        }
        /* –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–±–µ–¥—ã */
        @keyframes winPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        .win-animation {
            animation: winPulse 0.5s ease infinite;
        }
        /* –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü */
        .confetti {
            position: fixed;
            width: 10px;
            height: 10px;
            background: #ffd700;
            opacity: 0.8;
            border-radius: 0;
            z-index: 1000;
            pointer-events: none;
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ */
        #settings {
            display: none;
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            text-align: left;
            max-width: 600px;
            animation: fadeIn 0.3s ease;
        }
        #settings h3 {
            margin-top: 0;
            color: #607D8B;
        }
        .settings-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
            padding: 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        }
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: #4CAF50;
        }
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ */
        .mobile-helper {
            display: none;
            margin-top: 15px;
            padding: 10px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            font-size: 0.9em;
        }
        .orientation-warning {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            z-index: 10000;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 1.5em;
            text-align: center;
            padding: 20px;
        }
        .orientation-warning span {
            font-size: 3em;
            margin-bottom: 20px;
        }
        /* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */
        .scroll-indicator {
            position: absolute;
            bottom: 5px;
            left: 50%;
            transform: translateX(-50%);
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.8em;
            background: rgba(0, 0, 0, 0.5);
            padding: 3px 8px;
            border-radius: 10px;
            animation: fadeInOut 2s infinite;
            z-index: 10;
        }
        @keyframes fadeInOut {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }
        @media (max-width: 768px) {
            #game-container {
                padding: 15px;
            }
            h1 {
                font-size: 2em;
            }
            .cell {
                width: 36px;
                height: 36px;
                min-width: 36px;
                font-size: 16px;
            }
            #controls {
                flex-direction: column;
                align-items: center;
            }
            button, select, #game-mode {
                width: 100%;
                max-width: 280px;
                margin: 5px 0;
            }
            .stat-item {
                font-size: 0.9em;
            }
            .mobile-helper {
                display: block;
            }
            #mode-toggle {
                display: block;
            }
        }
        @media (max-width: 480px) {
            #game-container {
                padding: 10px;
            }
            h1 {
                font-size: 1.8em;
            }
            .cell {
                width: 32px;
                height: 32px;
                min-width: 32px;
                font-size: 14px;
            }
            #stats, #global-stats {
                flex-direction: column;
                align-items: center;
            }
            button, select, #game-mode {
                padding: 10px 15px;
                font-size: 0.9em;
            }
        }
        @media (max-height: 600px) and (orientation: landscape) {
            #game-container {
                padding: 10px;
                max-width: 100%;
            }
            h1 {
                font-size: 1.5em;
                margin: 5px 0;
            }
            #stats {
                padding: 5px;
                margin-bottom: 10px;
                font-size: 0.9em;
            }
            #global-stats {
                padding: 8px;
                margin: 10px 0;
                font-size: 0.9em;
            }
            .cell {
                width: 30px;
                height: 30px;
                min-width: 30px;
                font-size: 14px;
            }
            #message {
                font-size: 1.2em;
                margin: 10px 0;
            }
            #controls {
                margin-top: 10px;
            }
            button, select, #game-mode {
                padding: 8px 12px;
                font-size: 0.8em;
                min-width: 120px;
            }
            #mode-toggle {
                display: block;
            }
        }
        @media (max-width: 350px) {
            .cell {
                width: 28px;
                height: 28px;
                min-width: 28px;
                font-size: 12px;
            }
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ */
        #board-scroll-container::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        #board-scroll-container::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.1);
            border-radius: 4px;
        }
        #board-scroll-container::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
        }
        #board-scroll-container::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }
        /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
        @keyframes coinAnimation {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        .coin-animation {
            animation: coinAnimation 0.5s ease;
        }
        @keyframes hintAnimation {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        .hint-animation {
            animation: hintAnimation 0.3s ease;
        }
        @keyframes timeWarning {
            0%, 100% { color: white; }
            50% { color: #ff6b6b; }
        }
        .time-warning {
            animation: timeWarning 1s infinite;
        }
        @media (orientation: portrait) and (max-height: 500px) {
            .orientation-warning {
                display: flex;
            }
            #game-container {
                display: none;
            }
            #how-to-play, #shop, #themes, #daily-reward, #records, #settings {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div id="fps-counter">FPS: 0</div>
    
    <div class="orientation-warning">
        <span>üìµ</span>
        <p id="orientation-text">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞</p>
    </div>
    
    <div id="game-container">
        <h1 id="game-title">ü•∑ –°–∞–ø—ë—Ä ü•∑</h1>
        
        <div id="stats">
            <div class="stat-item" id="mines-counter">üí£: 10</div>
            <div class="stat-item" id="timer">‚è±Ô∏è: <span id="time-left">0:00</span></div>
            <div class="stat-item" id="hint-counter">üí°: <span class="hint-counter">3</span></div>
            <div class="stat-item" id="coins-counter">ü™ô: <span class="coin">0</span></div>
        </div>
        
        <div id="global-stats">
            <div class="stat-item" id="total-games-text">–í—Å–µ–≥–æ –∏–≥—Ä: <span id="total-games">0</span></div>
            <div class="stat-item" id="wins-text">–ü–æ–±–µ–¥: <span id="wins">0</span></div>
            <div class="stat-item" id="losses-text">–ü–æ—Ä–∞–∂–µ–Ω–∏–π: <span id="losses">0</span></div>
            <div class="stat-item" id="win-rate-text">–í–∏–Ω—Ä–µ–π—Ç: <span id="win-rate">0%</span></div>
        </div>
        
        <div id="board-scroll-container">
            <div id="board-container">
                <div id="board"></div>
            </div>
            <div class="scroll-indicator" id="scroll-indicator">‚ÜôÔ∏è –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –ø–æ–ª–µ ‚ÜôÔ∏è</div>
        </div>
        
        <div class="mobile-helper" id="mobile-helper-text">
            üí° –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è, —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥–ª—è —Ñ–ª–∞–∂–∫–∞
        </div>
        
        <div id="message">–£–¥–∞—á–∏! –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏.</div>
        
        <div id="controls">
            <button id="reset-btn">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
            <select id="difficulty">
                <option value="easy">–õ–µ–≥–∫–æ (9√ó9, 10 –º–∏–Ω)</option>
                <option value="medium">–°—Ä–µ–¥–Ω–µ (12√ó12, 20 –º–∏–Ω)</option>
                <option value="hard">–°–ª–æ–∂–Ω–æ (12√ó16, 30 –º–∏–Ω)</option>
                <option value="expert">–≠–∫—Å–ø–µ—Ä—Ç (16√ó16, 40 –º–∏–Ω)</option>
                <option value="custom">–ö–∞—Å—Ç–æ–º–Ω—ã–π</option>
            </select>
            <select id="game-mode">
                <option value="classic">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º</option>
                <option value="timed">–†–µ–∂–∏–º –Ω–∞ –≤—Ä–µ–º—è</option>
            </select>
            <button id="hint-btn">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</button>
            <button id="mode-toggle">üö© –†–µ–∂–∏–º —Ñ–ª–∞–∂–∫–∞</button>
            <button id="shop-btn">üè™ –ú–∞–≥–∞–∑–∏–Ω</button>
            <button id="daily-btn">üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞</button>
            <button id="records-btn">üèÜ –†–µ–∫–æ—Ä–¥—ã</button>
            <button id="themes-btn">üé® –¢–µ–º—ã</button>
            <button id="settings-btn">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
        </div>
        
        <div id="custom-settings">
            <div>
                <label for="custom-cols" id="custom-cols-label">–ö–æ–ª–æ–Ω–∫–∏:</label>
                <input type="number" id="custom-cols" min="5" max="100" value="9">
                <span>(5-100)</span>
            </div>
            <div>
                <label for="custom-rows" id="custom-rows-label">–°—Ç—Ä–æ–∫–∏:</label>
                <input type="number" id="custom-rows" min="5" max="100" value="9">
                <span>(5-100)</span>
            </div>
            <div>
                <label for="custom-mines" id="custom-mines-label">–ú–∏–Ω—ã:</label>
                <input type="number" id="custom-mines" min="1" max="9999" value="10">
                <span>(1-9999)</span>
            </div>
            <div id="time-setting" style="display: none;">
                <label for="custom-time" id="custom-time-label">–í—Ä–µ–º—è (—Å–µ–∫):</label>
                <input type="number" id="custom-time" min="30" max="3600" value="180">
                <span>(30-3600)</span>
            </div>
        </div>
    </div>

    <div id="shop">
        <h3 id="shop-title">üè™ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥—Å–∫–∞–∑–æ–∫</h3>
        <div class="shop-item">
            <span id="shop-item-1">üí° 1 –ø–æ–¥—Å–∫–∞–∑–∫–∞</span>
            <button class="buy-btn" data-cost="100" data-amount="1" id="buy-1-btn">–ö—É–ø–∏—Ç—å –∑–∞ 100ü™ô</button>
        </div>
        <div class="shop-item">
            <span id="shop-item-3">üí° 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏</span>
            <button class="buy-btn" data-cost="250" data-amount="3" id="buy-3-btn">–ö—É–ø–∏—Ç—å –∑–∞ 250ü™ô</button>
        </div>
        <div class="shop-item">
            <span id="shop-item-5">üí° 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫</span>
            <button class="buy-btn" data-cost="400" data-amount="5" id="buy-5-btn">–ö—É–ø–∏—Ç—å –∑–∞ 400ü™ô</button>
        </div>
    </div>

    <div id="themes">
        <h3 id="themes-title">üé® –í—ã–±–æ—Ä —Ç–µ–º—ã</h3>
        <div class="theme-item" data-theme="default">
            <span><span class="theme-preview" style="background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);"></span> <span id="theme-default">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è</span></span>
            <span id="theme-default-price">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
        </div>
        <div class="theme-item" data-theme="dark">
            <span><span class="theme-preview" style="background: linear-gradient(135deg, #232526 0%, #414345 100%);"></span> <span id="theme-dark">–¢—ë–º–Ω–∞—è</span></span>
            <span>100ü™ô</span>
        </div>
        <div class="theme-item" data-theme="nature">
            <span><span class="theme-preview" style="background: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%);"></span> <span id="theme-nature">–ü—Ä–∏—Ä–æ–¥–∞</span></span>
            <span>200ü™ô</span>
        </div>
        <div class="theme-item" data-theme="sunset">
            <span><span class="theme-preview" style="background: linear-gradient(135deg, #ff5e62 0%, #ff9966 100%);"></span> <span id="theme-sunset">–ó–∞–∫–∞—Ç</span></span>
            <span>300ü™ô</span>
        </div>
        <div class="theme-item" data-theme="ocean">
            <span><span class="theme-preview" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);"></span> <span id="theme-ocean">–û–∫–µ–∞–Ω</span></span>
            <span>400ü™ô</span>
        </div>
    </div>

    <div id="daily-reward">
        <h3 id="daily-title">üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞</h3>
        <div class="reward-text" id="daily-text">–ü–æ–ª—É—á–∏—Ç–µ 500ü™ô –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –∏–≥—Ä—ã!</div>
        <div id="daily-timer" class="timer-text"></div>
        <button id="claim-daily-btn">–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É</button>
    </div>

    <div id="records">
        <h3 id="records-title">üèÜ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è</h3>
        <div class="record-item">
            <span class="record-difficulty" id="record-easy-text">–õ–µ–≥–∫–æ:</span>
            <span class="record-time" id="record-easy">--:--</span>
        </div>
        <div class="record-item">
            <span class="record-difficulty" id="record-medium-text">–°—Ä–µ–¥–Ω–µ:</span>
            <span class="record-time" id="record-medium">--:--</span>
        </div>
        <div class="record-item">
            <span class="record-difficulty" id="record-hard-text">–°–ª–æ–∂–Ω–æ:</span>
            <span class="record-time" id="record-hard">--:--</span>
        </div>
        <div class="record-item">
            <span class="record-difficulty" id="record-expert-text">–≠–∫—Å–ø–µ—Ä—Ç:</span>
            <span class="record-time" id="record-expert">--:--</span>
        </div>
    </div>

    <div id="settings">
        <h3 id="settings-title">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        <div class="settings-item">
            <span id="vibration-text">–í–∏–±—Ä–∞—Ü–∏—è:</span>
            <label class="switch">
                <input type="checkbox" id="vibration-toggle">
                <span class="slider"></span>
            </label>
        </div>
        <div class="settings-item">
            <span id="language-text">–Ø–∑—ã–∫:</span>
            <select id="language-select">
                <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                <option value="en">English</option>
            </select>
        </div>
        <div class="settings-item">
            <span id="control-mode-text">–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</span>
            <select id="control-mode-select">
                <option value="classic">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</option>
                <option value="alternative">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π</option>
            </select>
        </div>
    </div>

    <div id="how-to-play">
        <h3 onclick="toggleHowToPlay()">
            <span id="how-to-play-title">‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å</span>
            <span id="how-to-play-arrow">‚ñº</span>
        </h3>
        <div id="how-to-play-content">
            <p><strong id="goal-title">–¶–µ–ª—å –∏–≥—Ä—ã:</strong> <span id="goal-text">–æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–ª–µ—Ç–∫–∏, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –º–∏–Ω—ã –ò–õ–ò –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –º–∏–Ω—ã —Ñ–ª–∞–∂–∫–∞–º–∏.</span></p>
            
            <p><strong id="modes-title">–†–µ–∂–∏–º—ã –∏–≥—Ä—ã:</strong></p>
            <ul>
                <li>üèÅ <strong id="mode-classic">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</strong> - <span id="mode-classic-desc">–∏–≥—Ä–∞–π—Ç–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏</span></li>
                <li>‚è∞ <strong id="mode-timed">–ù–∞ –≤—Ä–µ–º—è</strong> - <span id="mode-timed-desc">–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ</span></li>
            </ul>

            <p><strong id="time-limits-title">–õ–∏–º–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:</strong></p>
            <ul>
                <li id="time-easy">–õ–µ–≥–∫–∏–π: 3 –º–∏–Ω—É—Ç—ã</li>
                <li id="time-medium">–°—Ä–µ–¥–Ω–∏–π: 5 –º–∏–Ω—É—Ç</li>
                <li id="time-hard">–°–ª–æ–∂–Ω—ã–π: 7 –º–∏–Ω—É—Ç</li>
                <li id="time-expert">–≠–∫—Å–ø–µ—Ä—Ç: 10 –º–∏–Ω—É—Ç</li>
            </ul>

            <p><strong id="controls-title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong></p>
            <ul>
                <li>üñ±Ô∏è <strong id="control-left">–õ–µ–≤—ã–π –∫–ª–∏–∫</strong> - <span id="control-left-desc">–æ—Ç–∫—Ä—ã—Ç—å –∫–ª–µ—Ç–∫—É</span></li>
                <li>üñ±Ô∏è <strong id="control-right">–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫</strong> - <span id="control-right-desc">–ø–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å —Ñ–ª–∞–∂–æ–∫</span></li>
                <li>üì± <strong id="control-mobile">–ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö</strong> - <span id="control-mobile-desc">–∫–∞—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è —Ñ–ª–∞–∂–∫–∞</span></li>
                <li>üí° <strong id="control-hint">–ü–æ–¥—Å–∫–∞–∑–∫–∞</strong> - <span id="control-hint-desc">–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –º–∏–Ω—É</span></li>
                <li>üö© <strong id="control-flags">–ü–æ–±–µ–¥–∞ —Ñ–ª–∞–∂–∫–∞–º–∏</strong> - <span id="control-flags-desc">–µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç–µ –≤—Å–µ –º–∏–Ω—ã, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ</span></li>
                <li>üîÑ <strong id="control-alternative">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</strong> - <span id="control-alternative-desc">–ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É —Ä–µ–∂–∏–º–æ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–∂–∫–æ–≤</span></li>
            </ul>
        </div>
    </div>

    <script>
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        const difficulties = {
            easy: { rows: 9, cols: 9, mines: 10, reward: 100, time: 180 },    // 3 –º–∏–Ω—É—Ç—ã
            medium: { rows: 12, cols: 12, mines: 20, reward: 250, time: 300 }, // 5 –º–∏–Ω—É—Ç
            hard: { rows: 12, cols: 16, mines: 30, reward: 500, time: 420 },   // 7 –º–∏–Ω—É—Ç
            expert: { rows: 16, cols: 16, mines: 40, reward: 1000, time: 600 }, // 10 –º–∏–Ω—É—Ç
            custom: { rows: 9, cols: 9, mines: 10, reward: 0, time: 180 }
        };

        // –¢–µ–º—ã –∏–≥—Ä—ã
        const themes = {
            default: {
                background: 'linear-gradient(135deg, #6a11cb 0%, #2575fc 100%)',
                cellBg: 'linear-gradient(145deg, #bdc3c7, #ecf0f1)',
                cellRevealed: 'linear-gradient(145deg, #dfe6e9, #b2bec3)',
                price: 0
            },
            dark: {
                background: 'linear-gradient(135deg, #232526 0%, #414345 100%)',
                cellBg: 'linear-gradient(145deg, #3a3a3a, #4a4a4a)',
                cellRevealed: 'linear-gradient(145deg, #2d2d2d, #3d3d3d)',
                price: 100
            },
            nature: {
                background: 'linear-gradient(135deg, #56ab2f 0%, #a8e063 100%)',
                cellBg: 'linear-gradient(145deg, #c8e6c9, #a5d6a7)',
                cellRevealed: 'linear-gradient(145deg, #a5d6a7, #81c784)',
                price: 200
            },
            sunset: {
                background: 'linear-gradient(135deg, #ff5e62 0%, #ff9966 100%)',
                cellBg: 'linear-gradient(145deg, #ffccbc, #ffab91)',
                cellRevealed: 'linear-gradient(145deg, #ffab91, #ff8a65)',
                price: 300
            },
            ocean: {
                background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
                cellBg: 'linear-gradient(145deg, #b3e5fc, #81d4fa)',
                cellRevealed: 'linear-gradient(145deg, #81d4fa, #4fc3f7)',
                price: 400
            }
        };

        // –¢–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        const translations = {
            ru: {
                gameTitle: "ü•∑ –°–∞–ø—ë—Ä ü•∑",
                minesCounter: "üí£: ",
                timer: "‚è±Ô∏è: ",
                hintCounter: "üí°: ",
                coinsCounter: "ü™ô: ",
                totalGames: "–í—Å–µ–≥–æ –∏–≥—Ä: ",
                wins: "–ü–æ–±–µ–¥: ",
                losses: "–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ",
                winRate: "–í–∏–Ω—Ä–µ–π—Ç: ",
                mobileHelper: "üí° –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è, —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥–ª—è —Ñ–ª–∞–∂–∫–∞",
                initialMessage: "–£–¥–∞—á–∏! –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏.",
                resetBtn: "üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞",
                difficultyOptions: [
                    "–õ–µ–≥–∫–æ (9√ó9, 10 –º–∏–Ω)",
                    "–°—Ä–µ–¥–Ω–µ (12√ó12, 20 –º–∏–Ω)",
                    "–°–ª–æ–∂–Ω–æ (12√ó16, 30 –º–∏–Ω)",
                    "–≠–∫—Å–ø–µ—Ä—Ç (16√ó16, 40 –º–∏–Ω)",
                    "–ö–∞—Å—Ç–æ–º–Ω—ã–π"
                ],
                gameModeOptions: [
                    "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º",
                    "–†–µ–∂–∏–º –Ω–∞ –≤—Ä–µ–º—è"
                ],
                hintBtn: "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
                modeToggleOpen: "üîì –†–µ–∂–∏–º –æ—Ç–∫—Ä—ã—Ç–∏—è",
                modeToggleFlag: "üö© –†–µ–∂–∏–º —Ñ–ª–∞–∂–∫–∞",
                shopBtn: "üè™ –ú–∞–≥–∞–∑–∏–Ω",
                dailyBtn: "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
                recordsBtn: "üèÜ –†–µ–∫–æ—Ä–¥—ã",
                themesBtn: "üé® –¢–µ–º—ã",
                settingsBtn: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                customColsLabel: "–ö–æ–ª–æ–Ω–∫–∏:",
                customRowsLabel: "–°—Ç—Ä–æ–∫–∏:",
                customMinesLabel: "–ú–∏–Ω—ã:",
                customTimeLabel: "–í—Ä–µ–º—è (—Å–µ–∫):",
                shopTitle: "üè™ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥—Å–∫–∞–∑–æ–∫",
                shopItem1: "üí° 1 –ø–æ–¥—Å–∫–∞–∑–∫–∞",
                shopItem3: "üí° 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏",
                shopItem5: "üí° 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫",
                buy1Btn: "–ö—É–ø–∏—Ç—å –∑–∞ 100ü™ô",
                buy3Btn: "–ö—É–ø–∏—Ç—å –∑–∞ 250ü™ô",
                buy5Btn: "–ö—É–ø–∏—Ç—å –∑–∞ 400ü™ô",
                themesTitle: "üé® –í—ã–±–æ—Ä —Ç–µ–º—ã",
                themeDefault: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è",
                themeDark: "–¢—ë–º–Ω–∞—è",
                themeNature: "–ü—Ä–∏—Ä–æ–¥–∞",
                themeSunset: "–ó–∞–∫–∞—Ç",
                themeOcean: "–û–∫–µ–∞–Ω",
                themeDefaultPrice: "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ",
                dailyTitle: "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
                dailyText: "–ü–æ–ª—É—á–∏—Ç–µ 500ü™ô –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –∏–≥—Ä—ã!",
                claimDailyBtn: "–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É",
                recordsTitle: "üèÜ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è",
                recordEasy: "–õ–µ–≥–∫–æ:",
                recordMedium: "–°—Ä–µ–¥–Ω–µ:",
                recordHard: "–°–ª–æ–∂–Ω–æ:",
                recordExpert: "–≠–∫—Å–ø–µ—Ä—Ç:",
                settingsTitle: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                vibrationText: "–í–∏–±—Ä–∞—Ü–∏—è:",
                languageText: "–Ø–∑—ã–∫:",
                controlModeText: "–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                controlModeOptions: ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"],
                howToPlayTitle: "‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å",
                goalTitle: "–¶–µ–ª—å –∏–≥—Ä—ã:",
                goalText: "–æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –∫–ª–µ—Ç–∫–∏, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –º–∏–Ω—ã –ò–õ–ò –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –º–∏–Ω—ã —Ñ–ª–∞–∂–∫–∞–º–∏.",
                modesTitle: "–†–µ–∂–∏–º—ã –∏–≥—Ä—ã:",
                modeClassic: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
                modeClassicDesc: "–∏–≥—Ä–∞–π—Ç–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏",
                modeTimed: "–ù–∞ –≤—Ä–µ–º—è",
                modeTimedDesc: "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ",
                timeLimitsTitle: "–õ–∏–º–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:",
                timeEasy: "–õ–µ–≥–∫–∏–π: 3 –º–∏–Ω—É—Ç—ã",
                timeMedium: "–°—Ä–µ–¥–Ω–∏–π: 5 –º–∏–Ω—É—Ç",
                timeHard: "–°–ª–æ–∂–Ω—ã–π: 7 –º–∏–Ω—É—Ç",
                timeExpert: "–≠–∫—Å–ø–µ—Ä—Ç: 10 –º–∏–Ω—É—Ç",
                controlsTitle: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
                controlLeft: "–õ–µ–≤—ã–π –∫–ª–∏–∫",
                controlLeftDesc: "–æ—Ç–∫—Ä—ã—Ç—å –∫–ª–µ—Ç–∫—É",
                controlRight: "–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫",
                controlRightDesc: "–ø–æ—Å—Ç–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å —Ñ–ª–∞–∂–æ–∫",
                controlMobile: "–ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö",
                controlMobileDesc: "–∫–∞—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è —Ñ–ª–∞–∂–∫–∞",
                controlHint: "–ü–æ–¥—Å–∫–∞–∑–∫–∞",
                controlHintDesc: "–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –º–∏–Ω—É",
                controlFlags: "–ü–æ–±–µ–¥–∞ —Ñ–ª–∞–∂–∫–∞–º–∏",
                controlFlagsDesc: "–µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç–µ –≤—Å–µ –º–∏–Ω—ã, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ",
                controlAlternative: "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                controlAlternativeDesc: "–ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É —Ä–µ–∂–∏–º–æ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–∂–∫–æ–≤",
                winMessage: "üéâ –ü–æ–±–µ–¥–∞! üéâ",
                loseMessage: "üí• Game Over! üí•",
                timeUpMessage: "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!",
                newRecord: " –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! ",
                notEnoughCoins: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!",
                notEnoughCoinsHint: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏!",
                dailyAlreadyClaimed: "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!",
                dailyRewardClaimed: "üéâ –ü–æ–ª—É—á–µ–Ω–æ 500ü™ô –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!",
                hintsBought: "–ö—É–ø–ª–µ–Ω–æ ",
                hintsFor: " –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∑–∞ ",
                orientationText: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞",
                themeBought: "–¢–µ–º–∞ \"",
                themeBoughtFor: "\" –∫—É–ø–ª–µ–Ω–∞ –∑–∞ ",
                scrollIndicator: "‚ÜôÔ∏è –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –ø–æ–ª–µ ‚ÜôÔ∏è"
            },
            en: {
                gameTitle: "ü•∑ Minesweeper ü•∑",
                minesCounter: "üí£: ",
                timer: "‚è±Ô∏è: ",
                hintCounter: "üí°: ",
                coinsCounter: "ü™ô: ",
                totalGames: "Total games: ",
                wins: "Wins: ",
                losses: "Losses: ",
                winRate: "Win rate: ",
                mobileHelper: "üí° Tap to open, long press for flag",
                initialMessage: "Good luck! Open the cells.",
                resetBtn: "üîÑ New game",
                difficultyOptions: [
                    "Easy (9√ó9, 10 mines)",
                    "Medium (12√ó12, 20 mines)",
                    "Hard (12√ó16, 30 mines)",
                    "Expert (16√ó16, 40 mines)",
                    "Custom"
                ],
                gameModeOptions: [
                    "Classic mode",
                    "Timed mode"
                ],
                hintBtn: "üí° Hint",
                modeToggleOpen: "üîì Open mode",
                modeToggleFlag: "üö© Flag mode",
                shopBtn: "üè™ Shop",
                dailyBtn: "üéÅ Daily reward",
                recordsBtn: "üèÜ Records",
                themesBtn: "üé® Themes",
                settingsBtn: "‚öôÔ∏è Settings",
                customColsLabel: "Columns:",
                customRowsLabel: "Rows:",
                customMinesLabel: "Mines:",
                customTimeLabel: "Time (sec):",
                shopTitle: "üè™ Hint Shop",
                shopItem1: "üí° 1 hint",
                shopItem3: "üí° 3 hints",
                shopItem5: "üí° 5 hints",
                buy1Btn: "Buy for 100ü™ô",
                buy3Btn: "Buy for 250ü™ô",
                buy5Btn: "Buy for 400ü™ô",
                themesTitle: "üé® Theme Selection",
                themeDefault: "Default",
                themeDark: "Dark",
                themeNature: "Nature",
                themeSunset: "Sunset",
                themeOcean: "Ocean",
                themeDefaultPrice: "Free",
                dailyTitle: "üéÅ Daily Reward",
                dailyText: "Get 500ü™ô for visiting the game!",
                claimDailyBtn: "Claim reward",
                recordsTitle: "üèÜ Best Time",
                recordEasy: "Easy:",
                recordMedium: "Medium:",
                recordHard: "Hard:",
                recordExpert: "Expert:",
                settingsTitle: "‚öôÔ∏è Settings",
                vibrationText: "Vibration:",
                languageText: "Language:",
                controlModeText: "Control mode:",
                controlModeOptions: ["Classic", "Alternative"],
                howToPlayTitle: "‚ùì How to play",
                goalTitle: "Goal:",
                goalText: "open all cells that do not contain mines OR correctly mark all mines with flags.",
                modesTitle: "Game modes:",
                modeClassic: "Classic",
                modeClassicDesc: "play without time limit",
                modeTimed: "Timed",
                modeTimedDesc: "limited time to complete",
                timeLimitsTitle: "Time limits:",
                timeEasy: "Easy: 3 minutes",
                timeMedium: "Medium: 5 minutes",
                timeHard: "Hard: 7 minutes",
                timeExpert: "Expert: 10 minutes",
                controlsTitle: "Controls:",
                controlLeft: "Left click",
                controlLeftDesc: "open cell",
                controlRight: "Right click",
                controlRightDesc: "place/remove flag",
                controlMobile: "On mobile",
                controlMobileDesc: "tap to open, long press for flag",
                controlHint: "Hint",
                controlHintDesc: "highlights a random mine",
                controlFlags: "Win with flags",
                controlFlagsDesc: "if you mark all mines correctly, you win",
                controlAlternative: "Alternative control",
                controlAlternativeDesc: "switch between opening and flag placement modes",
                winMessage: "üéâ Victory! üéâ",
                loseMessage: "üí• Game Over! üí•",
                timeUpMessage: "‚è∞ Time's up!",
                newRecord: " New record! ",
                notEnoughCoins: "Not enough coins!",
                notEnoughCoinsHint: "Not enough coins for a hint!",
                dailyAlreadyClaimed: "You've already claimed the reward today!",
                dailyRewardClaimed: "üéâ Received 500ü™ô for daily reward!",
                hintsBought: "Bought ",
                hintsFor: " hints for ",
                orientationText: "Please rotate your device to landscape mode for better gaming experience",
                themeBought: "Theme \"",
                themeBoughtFor: "\" bought for ",
                scrollIndicator: "‚ÜôÔ∏è Scroll the field ‚ÜôÔ∏è"
            }
        };

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        let globalStats = {
            totalGames: 0,
            wins: 0,
            losses: 0,
            coins: 0,
            hints: 3,
            lastDailyReward: null,
            records: {
                easy: null,
                medium: null,
                hard: null,
                expert: null
            },
            currentTheme: 'default',
            purchasedThemes: ['default'],
            language: 'ru',
            vibration: true,
            controlMode: 'classic', // 'classic' –∏–ª–∏ 'alternative'
            get winRate() {
                return this.totalGames > 0 ? (this.wins / this.totalGames * 100).toFixed(1) : 0;
            }
        };

        let board = [];
        let gameState = { 
            minesCount: 10, 
            flagsCount: 0, 
            revealedCount: 0,
            totalCells: 81,
            gameOver: false,
            gameWon: false,
            firstClick: true,
            startTime: null,
            timerInterval: null,
            timeLimit: 0, // 0 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
            timeLeft: 0,
            elapsedTime: 0,
            hintActive: false,
            lastFrameTime: 0,
            fps: 0,
            currentDifficulty: 'easy',
            gameMode: 'classic', // 'classic' –∏–ª–∏ 'timed'
            freeHintsUsed: 0,
            dailyCheckInterval: null,
            dailyRewardClaimed: false,
            touchStart: null,
            currentTouchCell: null,
            cellSize: 40, // –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
            supportsVibration: false, // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
            currentActionMode: 'open', // 'open' –∏–ª–∏ 'flag' –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            boardWidth: 0,
            boardHeight: 0
        };

        const boardEl = document.getElementById('board');
        const boardContainerEl = document.getElementById('board-container');
        const boardScrollContainerEl = document.getElementById('board-scroll-container');
        const scrollIndicatorEl = document.getElementById('scroll-indicator');
        const minesCounterEl = document.getElementById('mines-counter');
        const timerEl = document.getElementById('timer');
        const timeLeftEl = document.getElementById('time-left');
        const messageEl = document.getElementById('message');
        const resetBtn = document.getElementById('reset-btn');
        const difficultySelect = document.getElementById('difficulty');
        const gameModeSelect = document.getElementById('game-mode');
        const hintBtn = document.getElementById('hint-btn');
        const modeToggleBtn = document.getElementById('mode-toggle');
        const shopBtn = document.getElementById('shop-btn');
        const dailyBtn = document.getElementById('daily-btn');
        const recordsBtn = document.getElementById('records-btn');
        const themesBtn = document.getElementById('themes-btn');
        const settingsBtn = document.getElementById('settings-btn');
        const shopEl = document.getElementById('shop');
        const themesEl = document.getElementById('themes');
        const dailyEl = document.getElementById('daily-reward');
        const recordsEl = document.getElementById('records');
        const settingsEl = document.getElementById('settings');
        const claimDailyBtn = document.getElementById('claim-daily-btn');
        const dailyTimerEl = document.getElementById('daily-timer');
        const hintCounterEl = document.querySelector('.hint-counter');
        const coinsCounterEl = document.querySelector('.coin');
        const customSettingsEl = document.getElementById('custom-settings');
        const customColsInput = document.getElementById('custom-cols');
        const customRowsInput = document.getElementById('custom-rows');
        const customMinesInput = document.getElementById('custom-mines');
        const customTimeInput = document.getElementById('custom-time');
        const timeSettingEl = document.getElementById('time-setting');
        const totalGamesEl = document.getElementById('total-games');
        const winsEl = document.getElementById('wins');
        const lossesEl = document.getElementById('losses');
        const winRateEl = document.getElementById('win-rate');
        const fpsCounterEl = document.getElementById('fps-counter');
        const recordEasyEl = document.getElementById('record-easy');
        const recordMediumEl = document.getElementById('record-medium');
        const recordHardEl = document.getElementById('record-hard');
        const recordExpertEl = document.getElementById('record-expert');
        const orientationWarningEl = document.querySelector('.orientation-warning');
        const orientationTextEl = document.getElementById('orientation-text');
        const vibrationToggle = document.getElementById('vibration-toggle');
        const languageSelect = document.getElementById('language-select');
        const controlModeSelect = document.getElementById('control-mode-select');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∏–±—Ä–∞—Ü–∏–∏
        function checkVibrationSupport() {
            gameState.supportsVibration = ('vibrate' in navigator || 'webkitVibrate' in navigator) && globalStats.vibration;
        }

        // –§—É–Ω–∫—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏
        function vibrate(pattern) {
            if (!gameState.supportsVibration) return;
            
            try {
                if (navigator.vibrate) {
                    navigator.vibrate(pattern);
                } else if (navigator.webkitVibrate) {
                    navigator.webkitVibrate(pattern);
                }
            } catch (e) {
                console.warn('Vibration API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
                gameState.supportsVibration = false;
            }
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        function setLanguage(lang) {
            if (!translations[lang]) return;
            
            globalStats.language = lang;
            const t = translations[lang];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            document.getElementById('game-title').textContent = t.gameTitle;
            document.getElementById('mobile-helper-text').textContent = t.mobileHelper;
            document.getElementById('total-games-text').textContent = t.totalGames;
            document.getElementById('wins-text').textContent = t.wins;
            document.getElementById('losses-text').textContent = t.losses;
            document.getElementById('win-rate-text').textContent = t.winRate;
            resetBtn.textContent = t.resetBtn;
            hintBtn.textContent = t.hintBtn;
            updateModeToggleButton();
            shopBtn.textContent = t.shopBtn;
            dailyBtn.textContent = t.dailyBtn;
            recordsBtn.textContent = t.recordsBtn;
            themesBtn.textContent = t.themesBtn;
            settingsBtn.textContent = t.settingsBtn;
            document.getElementById('custom-cols-label').textContent = t.customColsLabel;
            document.getElementById('custom-rows-label').textContent = t.customRowsLabel;
            document.getElementById('custom-mines-label').textContent = t.customMinesLabel;
            document.getElementById('custom-time-label').textContent = t.customTimeLabel;
            document.getElementById('shop-title').textContent = t.shopTitle;
            document.getElementById('shop-item-1').textContent = t.shopItem1;
            document.getElementById('shop-item-3').textContent = t.shopItem3;
            document.getElementById('shop-item-5').textContent = t.shopItem5;
            document.getElementById('buy-1-btn').textContent = t.buy1Btn;
            document.getElementById('buy-3-btn').textContent = t.buy3Btn;
            document.getElementById('buy-5-btn').textContent = t.buy5Btn;
            document.getElementById('themes-title').textContent = t.themesTitle;
            document.getElementById('theme-default').textContent = t.themeDefault;
            document.getElementById('theme-dark').textContent = t.themeDark;
            document.getElementById('theme-nature').textContent = t.themeNature;
            document.getElementById('theme-sunset').textContent = t.themeSunset;
            document.getElementById('theme-ocean').textContent = t.themeOcean;
            document.getElementById('theme-default-price').textContent = t.themeDefaultPrice;
            document.getElementById('daily-title').textContent = t.dailyTitle;
            document.getElementById('daily-text').textContent = t.dailyText;
            claimDailyBtn.textContent = t.claimDailyBtn;
            document.getElementById('records-title').textContent = t.recordsTitle;
            document.getElementById('record-easy-text').textContent = t.recordEasy;
            document.getElementById('record-medium-text').textContent = t.recordMedium;
            document.getElementById('record-hard-text').textContent = t.recordHard;
            document.getElementById('record-expert-text').textContent = t.recordExpert;
            document.getElementById('settings-title').textContent = t.settingsTitle;
            document.getElementById('vibration-text').textContent = t.vibrationText;
            document.getElementById('language-text').textContent = t.languageText;
            document.getElementById('control-mode-text').textContent = t.controlModeText;
            document.getElementById('how-to-play-title').textContent = t.howToPlayTitle;
            document.getElementById('goal-title').textContent = t.goalTitle;
            document.getElementById('goal-text').textContent = t.goalText;
            document.getElementById('modes-title').textContent = t.modesTitle;
            document.getElementById('mode-classic').textContent = t.modeClassic;
            document.getElementById('mode-classic-desc').textContent = t.modeClassicDesc;
            document.getElementById('mode-timed').textContent = t.modeTimed;
            document.getElementById('mode-timed-desc').textContent = t.modeTimedDesc;
            document.getElementById('time-limits-title').textContent = t.timeLimitsTitle;
            document.getElementById('time-easy').textContent = t.timeEasy;
            document.getElementById('time-medium').textContent = t.timeMedium;
            document.getElementById('time-hard').textContent = t.timeHard;
            document.getElementById('time-expert').textContent = t.timeExpert;
            document.getElementById('controls-title').textContent = t.controlsTitle;
            document.getElementById('control-left').textContent = t.controlLeft;
            document.getElementById('control-left-desc').textContent = t.controlLeftDesc;
            document.getElementById('control-right').textContent = t.controlRight;
            document.getElementById('control-right-desc').textContent = t.controlRightDesc;
            document.getElementById('control-mobile').textContent = t.controlMobile;
            document.getElementById('control-mobile-desc').textContent = t.controlMobileDesc;
            document.getElementById('control-hint').textContent = t.controlHint;
            document.getElementById('control-hint-desc').textContent = t.controlHintDesc;
            document.getElementById('control-flags').textContent = t.controlFlags;
            document.getElementById('control-flags-desc').textContent = t.controlFlagsDesc;
            document.getElementById('control-alternative').textContent = t.controlAlternative;
            document.getElementById('control-alternative-desc').textContent = t.controlAlternativeDesc;
            orientationTextEl.textContent = t.orientationText;
            scrollIndicatorEl.textContent = t.scrollIndicator;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
            const difficultyOptions = difficultySelect.options;
            for (let i = 0; i < difficultyOptions.length; i++) {
                difficultyOptions[i].textContent = t.difficultyOptions[i];
            }
            
            const gameModeOptions = gameModeSelect.options;
            for (let i = 0; i < gameModeOptions.length; i++) {
                gameModeOptions[i].textContent = t.gameModeOptions[i];
            }
            
            const controlModeOptions = controlModeSelect.options;
            for (let i = 0; i < controlModeOptions.length; i++) {
                controlModeOptions[i].textContent = t.controlModeOptions[i];
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateStatsDisplay();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            saveStats();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        function updateModeToggleButton() {
            const t = translations[globalStats.language];
            if (gameState.currentActionMode === 'open') {
                modeToggleBtn.textContent = t.modeToggleFlag;
                modeToggleBtn.style.background = 'linear-gradient(to bottom, #2196F3, #0D47A1)';
            } else {
                modeToggleBtn.textContent = t.modeToggleOpen;
                modeToggleBtn.style.background = 'linear-gradient(to bottom, #4CAF50, #388E3C)';
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–µ–π—Å—Ç–≤–∏—è (–æ—Ç–∫—Ä—ã—Ç–∏–µ/—Ñ–ª–∞–∂–æ–∫)
        function toggleActionMode() {
            gameState.currentActionMode = gameState.currentActionMode === 'open' ? 'flag' : 'open';
            updateModeToggleButton();
            
            // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
            vibrate(30);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        function checkScrollNeeded() {
            const boardRect = boardContainerEl.getBoundingClientRect();
            const scrollRect = boardScrollContainerEl.getBoundingClientRect();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            const needsScroll = boardRect.width > scrollRect.width || boardRect.height > scrollRect.height;
            
            if (needsScroll) {
                scrollIndicatorEl.style.display = 'block';
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    scrollIndicatorEl.style.display = 'none';
                }, 5000);
            } else {
                scrollIndicatorEl.style.display = 'none';
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        function createBoard(rows, cols) {
            board = [];
            boardEl.innerHTML = '';
            boardEl.style.gridTemplateColumns = `repeat(${cols}, ${gameState.cellSize}px)`;

            for (let y = 0; y < rows; y++) {
                board[y] = [];
                for (let x = 0; x < cols; x++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    cell.dataset.x = x;
                    cell.dataset.y = y;
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
                    const theme = themes[globalStats.currentTheme];
                    if (theme) {
                        cell.style.background = theme.cellBg;
                    }
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
                    cell.style.width = `${gameState.cellSize}px`;
                    cell.style.height = `${gameState.cellSize}px`;
                    cell.style.minWidth = `${gameState.cellSize}px`;
                    
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
                    cell.addEventListener('click', () => handleCellClick(x, y));
                    cell.addEventListener('contextmenu', (e) => {
                        e.preventDefault();
                        handleCellRightClick(x, y);
                    });
                    
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    cell.addEventListener('touchstart', (e) => {
                        e.preventDefault();
                        gameState.touchStart = Date.now();
                        gameState.currentTouchCell = {x, y};
                        cell.classList.add('touched');
                    }, { passive: false });
                    
                    cell.addEventListener('touchmove', (e) => {
                        e.preventDefault();
                        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞–ª–µ—Ü moved –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–ª–µ—Ç–∫–∏
                        const touch = e.touches[0];
                        const rect = cell.getBoundingClientRect();
                        if (touch.clientX < rect.left || touch.clientX > rect.right || 
                            touch.clientY < rect.top || touch.clientY > rect.bottom) {
                            cell.classList.remove('touched');
                            gameState.currentTouchCell = null;
                        }
                    }, { passive: false });
                    
                    cell.addEventListener('touchend', (e) => {
                        e.preventDefault();
                        cell.classList.remove('touched');
                        
                        if (gameState.currentTouchCell && gameState.currentTouchCell.x === x && gameState.currentTouchCell.y === y) {
                            const touchDuration = Date.now() - gameState.touchStart;
                            if (touchDuration > 500 && globalStats.controlMode === 'classic') {
                                handleCellRightClick(x, y);
                            } else {
                                handleCellClick(x, y);
                            }
                        }
                        gameState.currentTouchCell = null;
                    }, { passive: false });
                    
                    cell.addEventListener('touchcancel', (e) => {
                        e.preventDefault();
                        cell.classList.remove('touched');
                        gameState.currentTouchCell = null;
                    }, { passive: false });
                    
                    boardEl.appendChild(cell);
                    board[y][x] = {
                        isMine: false,
                        isRevealed: false,
                        isFlagged: false,
                        neighborMines: 0,
                        element: cell
                    };
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª—è
            gameState.boardWidth = cols * gameState.cellSize + (cols - 1) * 3 + 16; // —à–∏—Ä–∏–Ω–∞ —Å —É—á–µ—Ç–æ–º gap –∏ padding
            gameState.boardHeight = rows * gameState.cellSize + (rows - 1) * 3 + 16; // –≤—ã—Å–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º gap –∏ padding
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            setTimeout(checkScrollNeeded, 100);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        function handleCellClick(x, y) {
            if (gameState.gameOver || board[y][x].isRevealed) return;

            // –í –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            if (globalStats.controlMode === 'alternative') {
                if (gameState.currentActionMode === 'open') {
                    handleLeftClick(x, y);
                } else {
                    handleRightClick(x, y);
                }
            } else {
                // –í –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫—É
                handleLeftClick(x, y);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
        function handleCellRightClick(x, y) {
            if (gameState.gameOver || board[y][x].isRevealed) return;
            
            // –í –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–∂–æ–∫
            if (globalStats.controlMode === 'classic') {
                handleRightClick(x, y);
            }
            // –í –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        }

        // –õ–µ–≤—ã–π –∫–ª–∏–∫ - –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏
        function handleLeftClick(x, y) {
            if (gameState.gameOver || board[y][x].isFlagged || board[y][x].isRevealed) return;

            if (gameState.firstClick) {
                gameState.firstClick = false;
                placeMines(x, y, gameState.minesCount);
            }

            if (board[y][x].isMine) {
                gameOver(false);
                board[y][x].element.classList.add('revealed', 'mine', 'exploded');
                return;
            }

            revealCell(x, y);
            checkWin();
        }

        // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–∂–∫–∞
        function handleRightClick(x, y) {
            if (gameState.gameOver || board[y][x].isRevealed) return;

            const cell = board[y][x];
            cell.isFlagged = !cell.isFlagged;
            
            if (cell.isFlagged) {
                gameState.flagsCount++;
                cell.element.classList.add('flagged');
                // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–ª–∞–≥–∞
                vibrate(50);
            } else {
                gameState.flagsCount--;
                cell.element.classList.remove('flagged');
                // –ö–æ—Ä–æ—Ç–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ñ–ª–∞–≥–∞
                vibrate(20);
            }
            
            minesCounterEl.textContent = `üí£: ${gameState.minesCount - gameState.flagsCount}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É —á–µ—Ä–µ–∑ —Ñ–ª–∞–∂–∫–∏
            checkFlagWin();
        }

        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
        function placeMines(firstX, firstY, totalMines) {
            let minesPlaced = 0;
            const rows = board.length;
            const cols = board[0].length;

            const maxMines = rows * cols - 9;
            const actualMines = Math.min(totalMines, maxMines);
            gameState.minesCount = actualMines;
            minesCounterEl.textContent = `üí£: ${gameState.minesCount - gameState.flagsCount}`;

            while (minesPlaced < actualMines) {
                const x = Math.floor(Math.random() * cols);
                const y = Math.floor(Math.random() * rows);
                
                const isFirstClickArea = Math.abs(x - firstX) <= 1 && Math.abs(y - firstY) <= 1;
                
                if (!board[y][x].isMine && !isFirstClickArea) {
                    board[y][x].isMine = true;
                    minesPlaced++;
                    
                    for (let dy = -1; dy <= 1; dy++) {
                        for (let dx = -1; dx <= 1; dx++) {
                            const ny = y + dy;
                            const nx = x + dx;
                            if (ny >= 0 && ny < rows && nx >= 0 && nx < cols) {
                                board[ny][nx].neighborMines++;
                            }
                        }
                    }
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∏–Ω
            startTimer();
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–æ–∫
        function revealCell(x, y) {
            if (x < 0 || y < 0 || y >= board.length || x >= board[0].length) return;
            if (board[y][x].isRevealed || board[y][x].isFlagged) return;

            const cell = board[y][x];
            cell.isRevealed = true;
            gameState.revealedCount++;
            cell.element.classList.add('revealed', 'cell-reveal');

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–ª–µ—Ç–∫–µ
            const theme = themes[globalStats.currentTheme];
            if (theme) {
                cell.element.style.background = theme.cellRevealed;
            }

            if (cell.neighborMines > 0) {
                cell.element.textContent = cell.neighborMines;
                cell.element.classList.add(`num-${cell.neighborMines}`);
            } else {
                for (let dy = -1; dy <= 1; dy++) {
                    for (let dx = -1; dx <= 1; dx++) {
                        revealCell(x + dx, y + dy);
                    }
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã —á–µ—Ä–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
        function checkWin() {
            if (gameState.revealedCount === gameState.totalCells - gameState.minesCount) {
                gameOver(true);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–ª–∞–∂–∫–æ–≤
        function checkFlagWin() {
            let correctFlags = 0;
            let totalFlags = 0;
            
            for (let y = 0; y < board.length; y++) {
                for (let x = 0; x < board[0].length; x++) {
                    if (board[y][x].isFlagged) {
                        totalFlags++;
                        if (board[y][x].isMine) {
                            correctFlags++;
                        }
                    }
                }
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ —Ñ–ª–∞–∂–∫–∏ —Å—Ç–æ—è—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∏–Ω
            if (correctFlags === gameState.minesCount && totalFlags === gameState.minesCount) {
                gameOver(true);
            }
        }

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        function gameOver(isWin) {
            gameState.gameOver = true;
            clearInterval(gameState.timerInterval);

            globalStats.totalGames++;
            if (isWin) {
                globalStats.wins++;
                const t = translations[globalStats.language];
                messageEl.textContent = t.winMessage;
                messageEl.style.color = '#4CAF50';
                messageEl.classList.add('win-animation');
                gameState.gameWon = true;
                
                // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ
                vibrate([100, 50, 100]);
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞
                if (gameState.gameMode === 'classic' && gameState.currentDifficulty !== 'custom') {
                    const currentTime = gameState.elapsedTime;
                    const currentRecord = globalStats.records[gameState.currentDifficulty];
                    
                    if (!currentRecord || currentTime < currentRecord) {
                        globalStats.records[gameState.currentDifficulty] = currentTime;
                        messageEl.textContent += t.newRecord + formatTime(currentTime);
                    }
                }
                
                // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
                createConfetti();
                
                const reward = difficulties[gameState.currentDifficulty].reward;
                if (reward > 0) {
                    globalStats.coins += reward;
                    messageEl.textContent += ` +${reward}ü™ô`;
                    coinsCounterEl.classList.add('coin-animation');
                    setTimeout(() => coinsCounterEl.classList.remove('coin-animation'), 500);
                }
            } else {
                globalStats.losses++;
                const t = translations[globalStats.language];
                messageEl.textContent = t.loseMessage;
                messageEl.style.color = '#F44336';
                // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
                vibrate([200, 100, 200]);
                revealAllMines();
            }
            
            saveStats();
            updateStatsDisplay();
            updateRecordsDisplay();
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        function createConfetti() {
            const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
            
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = Math.random() * 100 + 'vw';
                confetti.style.top = '-10px';
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
                
                document.body.appendChild(confetti);
                
                const animation = confetti.animate([
                    { top: '-10px', transform: `rotate(0deg) translateX(0)` },
                    { top: '100vh', transform: `rotate(720deg) translateX(${Math.random() * 200 - 100}px)` }
                ], {
                    duration: 2000 + Math.random() * 3000,
                    easing: 'cubic-bezier(0.1, 0.8, 0.1, 1)'
                });
                
                animation.onfinish = () => {
                    confetti.remove();
                };
            }
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–Ω—ã –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
        function revealAllMines() {
            for (let y = 0; y < board.length; y++) {
                for (let x = 0; x < board[0].length; x++) {
                    const cell = board[y][x];
                    if (cell.isMine && !cell.isFlagged) {
                        cell.element.classList.add('revealed', 'mine');
                    }
                    if (!cell.isMine && cell.isFlagged) {
                        cell.element.classList.add('revealed');
                        cell.element.textContent = '‚ùå';
                    }
                }
            }
        }

        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ (–¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
        function startTimer() {
            gameState.startTime = Date.now();
            gameState.timerInterval = setInterval(() => {
                const elapsed = Date.now() - gameState.startTime;
                
                // –î–ª—è —Ä–µ–∂–∏–º–∞ –Ω–∞ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                if (gameState.gameMode === 'timed') {
                    gameState.timeLeft = Math.max(0, gameState.timeLimit - Math.floor(elapsed / 1000));
                    timeLeftEl.textContent = formatTime(gameState.timeLeft);
                    
                    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—Ä–µ–º–µ–Ω–∏
                    if (gameState.timeLeft <= 30 && gameState.timeLeft > 0) {
                        timeLeftEl.className = 'time-warning';
                    } else {
                        timeLeftEl.className = '';
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    if (gameState.timeLeft <= 0 && !gameState.gameOver) {
                        clearInterval(gameState.timerInterval);
                        const t = translations[globalStats.language];
                        messageEl.textContent = t.timeUpMessage;
                        messageEl.style.color = '#F44336';
                        gameOver(false);
                    }
                } else {
                    // –í –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
                    gameState.elapsedTime = Math.floor(elapsed / 1000);
                    timeLeftEl.textContent = formatTime(gameState.elapsedTime);
                    timeLeftEl.className = '';
                }
            }, 100);
        }

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        function activateHint() {
            if (gameState.gameOver || gameState.hintActive) return;
            
            if (globalStats.hints > 0) {
                useHint();
            } else if (globalStats.coins >= 100) {
                globalStats.coins -= 100;
                globalStats.hints = 1;
                saveStats();
                updateStatsDisplay();
                useHint();
            } else {
                const t = translations[globalStats.language];
                messageEl.textContent = t.notEnoughCoinsHint;
                messageEl.style.color = '#F44336';
            }
        }

        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        function useHint() {
            const unrevealedMines = [];
            for (let y = 0; y < board.length; y++) {
                for (let x = 0; x < board[0].length; x++) {
                    if (board[y][x].isMine && !board[y][x].isFlagged && !board[y][x].isRevealed) {
                        unrevealedMines.push({x, y});
                    }
                }
            }
            
            if (unrevealedMines.length === 0) return;
            
            const randomMine = unrevealedMines[Math.floor(Math.random() * unrevealedMines.length)];
            const cell = board[randomMine.y][randomMine.x].element;
            
            cell.classList.add('hint');
            gameState.hintActive = true;
            hintBtn.disabled = true;
            
            setTimeout(() => {
                cell.classList.remove('hint');
                gameState.hintActive = false;
                if (!gameState.gameOver) {
                    globalStats.hints--;
                    saveStats();
                    updateStatsDisplay();
                }
            }, 2000);
        }

        // –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        function buyHints(amount, cost) {
            if (globalStats.coins >= cost) {
                globalStats.coins -= cost;
                globalStats.hints += amount;
                saveStats();
                updateStatsDisplay();
                const t = translations[globalStats.language];
                messageEl.textContent = t.hintsBought + amount + t.hintsFor + cost + "ü™ô";
                messageEl.style.color = '#4CAF50';
                shopEl.style.display = 'none';
                
                coinsCounterEl.classList.add('coin-animation');
                hintCounterEl.classList.add('hint-animation');
                setTimeout(() => {
                    coinsCounterEl.classList.remove('coin-animation');
                    hintCounterEl.classList.remove('hint-animation');
                }, 500);
            } else {
                const t = translations[globalStats.language];
                messageEl.textContent = t.notEnoughCoins;
                messageEl.style.color = '#F44336';
            }
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${minutes}:${secs.toString().padStart(2, '0')}`;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        function initGame() {
            clearInterval(gameState.timerInterval);
            gameState.timerInterval = null;
            gameState.startTime = null;
            
            gameState.currentDifficulty = difficultySelect.value;
            gameState.gameMode = gameModeSelect.value;
            gameState.currentActionMode = 'open'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
            
            let difficultyConfig;
            if (gameState.currentDifficulty === 'custom') {
                const cols = parseInt(customColsInput.value) || 9;
                const rows = parseInt(customRowsInput.value) || 9;
                const mines = parseInt(customMinesInput.value) || 10;
                const time = parseInt(customTimeInput.value) || 180;
                
                difficultyConfig = { rows, cols, mines, reward: 0, time };
                customSettingsEl.style.display = 'block';
            } else {
                difficultyConfig = difficulties[gameState.currentDifficulty];
                customSettingsEl.style.display = 'none';
            }
            
            gameState.minesCount = difficultyConfig.mines;
            gameState.totalCells = difficultyConfig.rows * difficultyConfig.cols;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if (gameState.gameMode === 'timed') {
                gameState.timeLimit = difficultyConfig.time;
                gameState.timeLeft = difficultyConfig.time;
                gameState.elapsedTime = 0;
            } else {
                gameState.timeLimit = 0; // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
                gameState.timeLeft = 0;
                gameState.elapsedTime = 0;
            }
            
            gameState.flagsCount = 0;
            gameState.revealedCount = 0;
            gameState.gameOver = false;
            gameState.gameWon = false;
            gameState.firstClick = true;
            gameState.hintActive = false;
            gameState.freeHintsUsed = 0;

            minesCounterEl.textContent = `üí£: ${gameState.minesCount - gameState.flagsCount}`;
            timeLeftEl.textContent = formatTime(gameState.gameMode === 'timed' ? gameState.timeLeft : gameState.elapsedTime);
            timeLeftEl.className = '';
            
            const t = translations[globalStats.language];
            messageEl.textContent = t.initialMessage;
            messageEl.style.color = 'white';
            messageEl.classList.remove('win-animation');

            createBoard(difficultyConfig.rows, difficultyConfig.cols);
            updateHintButtonState();
            updateModeToggleButton();
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
                boardScrollContainerEl.scrollLeft = (gameState.boardWidth - boardScrollContainerEl.clientWidth) / 2;
                boardScrollContainerEl.scrollTop = (gameState.boardHeight - boardScrollContainerEl.clientHeight) / 2;
            }, 100);
        }

        // –°—á—ë—Ç—á–∏–∫ FPS
        function updateFPS() {
            const now = performance.now();
            const delta = now - gameState.lastFrameTime;
            
            if (gameState.lastFrameTime) {
                gameState.fps = Math.round(1000 / delta);
            }
            
            gameState.lastFrameTime = now;
            fpsCounterEl.textContent = `FPS: ${gameState.fps}`;
            
            requestAnimationFrame(updateFPS);
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å"
        function toggleHowToPlay() {
            const content = document.getElementById('how-to-play-content');
            const arrow = document.getElementById('how-to-play-arrow');
            
            if (content.style.display === 'block') {
                content.style.display = 'none';
                arrow.textContent = '‚ñº';
            } else {
                content.style.display = 'block';
                arrow.textContent = '‚ñ≤';
                shopEl.style.display = 'none';
                dailyEl.style.display = 'none';
                recordsEl.style.display = 'none';
                themesEl.style.display = 'none';
                settingsEl.style.display = 'none';
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        function toggleShop() {
            if (shopEl.style.display === 'block') {
                shopEl.style.display = 'none';
            } else {
                shopEl.style.display = 'block';
                dailyEl.style.display = 'none';
                recordsEl.style.display = 'none';
                themesEl.style.display = 'none';
                settingsEl.style.display = 'none';
                document.getElementById('how-to-play-content').style.display = 'none';
                document.getElementById('how-to-play-arrow').textContent = '‚ñº';
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
        function toggleDaily() {
            if (dailyEl.style.display === 'block') {
                dailyEl.style.display = 'none';
            } else {
                dailyEl.style.display = 'block';
                shopEl.style.display = 'none';
                recordsEl.style.display = 'none';
                themesEl.style.display = 'none';
                settingsEl.style.display = 'none';
                document.getElementById('how-to-play-content').style.display = 'none';
                document.getElementById('how-to-play-arrow').textContent = '‚ñº';
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–æ–≤
        function toggleRecords() {
            if (recordsEl.style.display === 'block') {
                recordsEl.style.display = 'none';
            } else {
                recordsEl.style.display = 'block';
                shopEl.style.display = 'none';
                dailyEl.style.display = 'none';
                themesEl.style.display = 'none';
                settingsEl.style.display = 'none';
                document.getElementById('how-to-play-content').style.display = 'none';
                document.getElementById('how-to-play-arrow').textContent = '‚ñº';
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º
        function toggleThemes() {
            if (themesEl.style.display === 'block') {
                themesEl.style.display = 'none';
            } else {
                themesEl.style.display = 'block';
                shopEl.style.display = 'none';
                dailyEl.style.display = 'none';
                recordsEl.style.display = 'none';
                settingsEl.style.display = 'none';
                document.getElementById('how-to-play-content').style.display = 'none';
                document.getElementById('how-to-play-arrow').textContent = '‚ñº';
                updateThemesDisplay();
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        function toggleSettings() {
            if (settingsEl.style.display === 'block') {
                settingsEl.style.display = 'none';
            } else {
                settingsEl.style.display = 'block';
                shopEl.style.display = 'none';
                dailyEl.style.display = 'none';
                recordsEl.style.display = 'none';
                themesEl.style.display = 'none';
                document.getElementById('how-to-play-content').style.display = 'none';
                document.getElementById('how-to-play-arrow').textContent = '‚ñº';
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º
        function updateThemesDisplay() {
            document.querySelectorAll('.theme-item').forEach(item => {
                const themeName = item.dataset.theme;
                if (globalStats.purchasedThemes.includes(themeName)) {
                    if (themeName === globalStats.currentTheme) {
                        item.classList.add('active');
                    } else {
                        item.classList.remove('active');
                    }
                    const priceSpan = item.querySelector('span:last-child');
                    if (priceSpan && themeName !== 'default') {
                        priceSpan.textContent = '‚úì –ö—É–ø–ª–µ–Ω–æ';
                    }
                }
            });
        }

        // –ü–æ–∫—É–ø–∫–∞ —Ç–µ–º—ã
        function buyTheme(themeName) {
            const theme = themes[themeName];
            if (!theme) return;
            
            if (globalStats.coins >= theme.price) {
                globalStats.coins -= theme.price;
                globalStats.purchasedThemes.push(themeName);
                globalStats.currentTheme = themeName;
                saveStats();
                updateStatsDisplay();
                updateThemesDisplay();
                applyTheme(themeName);
                
                const t = translations[globalStats.language];
                messageEl.textContent = t.themeBought + t['theme' + themeName.charAt(0).toUpperCase() + themeName.slice(1)] + t.themeBoughtFor + theme.price + 'ü™ô';
                messageEl.style.color = '#4CAF50';
                
                coinsCounterEl.classList.add('coin-animation');
                setTimeout(() => coinsCounterEl.classList.remove('coin-animation'), 500);
            } else {
                const t = translations[globalStats.language];
                messageEl.textContent = t.notEnoughCoins;
                messageEl.style.color = '#F44336';
            }
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        function applyTheme(themeName) {
            const theme = themes[themeName];
            if (!theme) return;
            
            document.body.style.background = theme.background;
            globalStats.currentTheme = themeName;
            saveStats();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–µ—Ç–∫–∏, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if (board.length > 0) {
                for (let y = 0; y < board.length; y++) {
                    for (let x = 0; x < board[0].length; x++) {
                        const cell = board[y][x];
                        if (cell.isRevealed) {
                            cell.element.style.background = theme.cellRevealed;
                        } else {
                            cell.element.style.background = theme.cellBg;
                        }
                    }
                }
            }
            
            updateThemesDisplay();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        function updateHintButtonState() {
            hintBtn.disabled = gameState.hintActive || gameState.gameOver || globalStats.hints <= 0;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        function updateStatsDisplay() {
            const t = translations[globalStats.language];
            minesCounterEl.textContent = t.minesCounter + (gameState.minesCount - gameState.flagsCount);
            hintCounterEl.textContent = globalStats.hints;
            coinsCounterEl.textContent = globalStats.coins;
            totalGamesEl.textContent = globalStats.totalGames;
            winsEl.textContent = globalStats.wins;
            lossesEl.textContent = globalStats.losses;
            winRateEl.textContent = globalStats.winRate + '%';
            
            if (globalStats.winRate > 50) {
                winRateEl.className = 'win-rate-positive';
            } else {
                winRateEl.className = 'win-rate-negative';
            }
            
            updateHintButtonState();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–æ–≤
        function updateRecordsDisplay() {
            recordEasyEl.textContent = globalStats.records.easy ? formatTime(globalStats.records.easy) : '--:--';
            recordMediumEl.textContent = globalStats.records.medium ? formatTime(globalStats.records.medium) : '--:--';
            recordHardEl.textContent = globalStats.records.hard ? formatTime(globalStats.records.hard) : '--:--';
            recordExpertEl.textContent = globalStats.records.expert ? formatTime(globalStats.records.expert) : '--:--';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
        function checkDailyReward() {
            const now = Date.now();
            const lastClaim = globalStats.lastDailyReward;
            
            if (!lastClaim) {
                dailyBtn.disabled = false;
                gameState.dailyRewardClaimed = false;
                return;
            }
            
            const lastClaimDate = new Date(lastClaim);
            const currentDate = new Date(now);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
            if (currentDate.getDate() !== lastClaimDate.getDate() || 
                currentDate.getMonth() !== lastClaimDate.getMonth() || 
                currentDate.getFullYear() !== lastClaimDate.getFullYear()) {
                dailyBtn.disabled = false;
                gameState.dailyRewardClaimed = false;
            } else {
                dailyBtn.disabled = true;
                gameState.dailyRewardClaimed = true;
                
                // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥—ã
                const nextDay = new Date(lastClaimDate);
                nextDay.setDate(nextDay.getDate() + 1);
                nextDay.setHours(0, 0, 0, 0);
                
                const timeLeft = nextDay.getTime() - now;
                const hours = Math.floor(timeLeft / (1000 * 60 * 60));
                const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                
                dailyTimerEl.textContent = `–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: ${hours}—á ${minutes}–º`;
            }
        }

        // –°–∫—Ä—ã—Ç–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
        function hideDailyReward() {
            dailyEl.style.display = 'none';
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        function saveStats() {
            localStorage.setItem('minesweeper_stats', JSON.stringify(globalStats));
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        function loadStats() {
            const savedStats = localStorage.getItem('minesweeper_stats');
            if (savedStats) {
                globalStats = {...globalStats, ...JSON.parse(savedStats)};
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            vibrationToggle.checked = globalStats.vibration;
            languageSelect.value = globalStats.language;
            controlModeSelect.value = globalStats.controlMode;
            modeToggleBtn.style.display = globalStats.controlMode === 'alternative' ? 'block' : 'none';
            
            updateStatsDisplay();
            updateRecordsDisplay();
            checkDailyReward();
            setLanguage(globalStats.language);
            applyTheme(globalStats.currentTheme);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        resetBtn.addEventListener('click', initGame);
        difficultySelect.addEventListener('change', function() {
            if (this.value === 'custom') {
                customSettingsEl.style.display = 'block';
                timeSettingEl.style.display = gameState.gameMode === 'timed' ? 'flex' : 'none';
            } else {
                customSettingsEl.style.display = 'none';
            }
            initGame();
        });
        
        gameModeSelect.addEventListener('change', function() {
            gameState.gameMode = this.value;
            if (difficultySelect.value === 'custom') {
                timeSettingEl.style.display = this.value === 'timed' ? 'flex' : 'none';
            }
            initGame();
        });
        
        hintBtn.addEventListener('click', activateHint);
        modeToggleBtn.addEventListener('click', toggleActionMode);
        shopBtn.addEventListener('click', toggleShop);
        dailyBtn.addEventListener('click', toggleDaily);
        recordsBtn.addEventListener('click', toggleRecords);
        themesBtn.addEventListener('click', toggleThemes);
        settingsBtn.addEventListener('click', toggleSettings);
        claimDailyBtn.addEventListener('click', claimDailyReward);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        customColsInput.addEventListener('change', updateCustomSettings);
        customRowsInput.addEventListener('change', updateCustomSettings);
        customMinesInput.addEventListener('change', updateCustomSettings);
        customTimeInput.addEventListener('change', updateCustomSettings);
        
        function updateCustomSettings() {
            if (difficultySelect.value !== 'custom') return;
            
            const cols = parseInt(customColsInput.value) || 9;
            const rows = parseInt(customRowsInput.value) || 9;
            const mines = parseInt(customMinesInput.value) || 10;
            const time = parseInt(customTimeInput.value) || 180;
            
            customColsInput.value = Math.max(5, Math.min(100, cols));
            customRowsInput.value = Math.max(5, Math.min(100, rows));
            customMinesInput.value = Math.max(1, Math.min(9999, mines));
            customTimeInput.value = Math.max(30, Math.min(3600, time));
            
            initGame();
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
        document.querySelectorAll('.buy-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const cost = parseInt(this.dataset.cost);
                const amount = parseInt(this.dataset.amount);
                buyHints(amount, cost);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–º
        document.querySelectorAll('.theme-item').forEach(item => {
            item.addEventListener('click', function() {
                const themeName = this.dataset.theme;
                if (globalStats.purchasedThemes.includes(themeName)) {
                    applyTheme(themeName);
                    updateThemesDisplay();
                } else {
                    buyTheme(themeName);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
        languageSelect.addEventListener('change', function() {
            const lang = this.value;
            setLanguage(lang);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏
        vibrationToggle.addEventListener('change', function() {
            globalStats.vibration = this.checked;
            checkVibrationSupport();
            saveStats();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controlModeSelect.addEventListener('change', function() {
            globalStats.controlMode = this.value;
            modeToggleBtn.style.display = globalStats.controlMode === 'alternative' ? 'block' : 'none';
            saveStats();
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
        function claimDailyReward() {
            if (gameState.dailyRewardClaimed) {
                const t = translations[globalStats.language];
                messageEl.textContent = t.dailyAlreadyClaimed;
                messageEl.style.color = '#F44336';
                return;
            }
            
            gameState.dailyRewardClaimed = true;
            
            globalStats.coins += 500;
            globalStats.lastDailyReward = Date.now();
            saveStats();
            
            coinsCounterEl.classList.add('coin-animation');
            setTimeout(() => coinsCounterEl.classList.remove('coin-animation'), 500);
            
            updateStatsDisplay();
            hideDailyReward();
            
            const t = translations[globalStats.language];
            messageEl.textContent = t.dailyRewardClaimed;
            messageEl.style.color = '#4CAF50';
            
            setTimeout(checkDailyReward, 1000);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', function() {
            checkScrollNeeded();
        });
        
        window.addEventListener('orientationchange', function() {
            setTimeout(function() {
                checkScrollNeeded();
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                boardScrollContainerEl.scrollLeft = (gameState.boardWidth - boardScrollContainerEl.clientWidth) / 2;
                boardScrollContainerEl.scrollTop = (gameState.boardHeight - boardScrollContainerEl.clientHeight) / 2;
            }, 100);
        });

        // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
        checkVibrationSupport();
        loadStats();
        initGame();
        updateFPS();
    </script>
</body>
</html>
